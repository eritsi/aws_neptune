# List the start up tasks. Learn more https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - name: Install aws-cli and configure. Create a sample roles & policies
    init: |
      pip install awscli slack_sdk pandas
      gp sync-done aws-cli
      # ipynb with R
      pip install jupytext openpyxl optuna pandas_gbq scikit-learn lightgbm
      jupyter notebook --generate-config
      echo -e '\nc.NotebookApp.contents_manager_class = "jupytext.TextFileContentsManager"' >> ~/.jupyter/jupyter_notebook_config.py
      echo -e '\nc.ContentsManager.default_jupytext_formats = "ipynb,py"' >> ~/.jupyter/jupyter_notebook_config.py
      jupyter notebook --ip=*
  - name: new shell
    init: |
      gp sync-await aws-cli
      source ~/.bashrc
      read -p "Enter Your AWS Profile: " AWS_ID
      aws configure --profile $AWS_ID
      export AWS_PROFILE=$AWS_ID
      # aws configure
      aws iam list-users --query 'Users[].UserName'
      aws iam list-groups-for-user --user-name $AWS_ID --query 'Groups[].GroupName'
      # aws iam list-policies --scope AWS
      aws iam list-policies --scope Local | jq ".Policies[].PolicyName"
      aws iam list-policies --only-attached | jq ".Policies[].PolicyName"
      aws iam list-roles | jq ".Roles[].RoleName"
      gp sync-done aws-role-policy
    openMode: split-right
  - name: Create Neptune Cluster & Instance 
    init: |
      gp sync-await aws-role-policy
      source ~/.bashrc
      aws configure
      
      # Create Neptune
      # ユーザー入力を変数に保持
      read -p "Enter Your Neptune cluster name: " NEP_CLUS
      # 変数と文字列の連結
      NEP_INST="${NEP_CLUS}-instance"
      NEP_CLUS="${NEP_CLUS}-cluster"
      # ARNは現状、既存のものを使う
      read -p "Enter Your Neptune Role ARN: [aws neptune describe-db-clusters --db-cluster-identifier xxx]" NEP_ARN
      aws neptune create-db-cluster --db-cluster-identifier $NEP_CLUS --engine neptune
      aws neptune create-db-instance --db-cluster-identifier $NEP_CLUS --engine neptune --db-instance-identifier $NEP_INST --db-instance-class db.t3.medium
      
      # Wait for the end of creation
      sleep 300; echo "waiting for the end of creation of the instance..."
      aws neptune wait db-instance-available --db-instance-identifier $NEP_INST
      aws neptune add-role-to-db-cluster --db-cluster-identifier $NEP_CLUS --role-arn $NEP_ARN
      echo "Role is attached."
      aws neptune describe-db-clusters --db-cluster-identifier $NEP_CLUS
      aws neptune describe-db-instances --db-instance-identifier $NEP_INST
      
      # 実行結果を変数に保持
      # json返り値の特定のkeyのvalueを取り出す。"を外すための -r オプション
      NB_RES=`aws neptune describe-db-clusters --db-cluster-identifier $NEP_CLUS | jq -r ".DBClusters[].DbClusterResourceId"`
      NB_SUB=`aws neptune describe-db-instances --db-instance-identifier $NEP_INST | jq -r ".DBInstances[].DBSubnetGroup.Subnets[0].SubnetIdentifier"`
      NB_VPC=`aws neptune describe-db-instances --db-instance-identifier $NEP_INST | jq -r ".DBInstances[].VpcSecurityGroups[].VpcSecurityGroupId"`
      echo "Neptune DB's Resource ID : $NB_RES"
      # LifeCycleを作るためにEndPoint URLを得る
      DB_EP=`aws neptune describe-db-clusters --db-cluster-identifier $NEP_CLUS | jq -r ".DBClusters[].Endpoint"`
      cat life_cycle_for_neptune_nb.sh | sed -e 's/{HOST_URL}/'$DB_EP'/g' >> lifecycle.txt
      # ここから、実際にLifeCycleを作成する
      read -p "Enter Your LC Name to create(hyphen is allowed): " LC_NAME
      aws sagemaker create-notebook-instance-lifecycle-config --notebook-instance-lifecycle-config-name $LC_NAME --on-start Content="`(cat ./lifecycle.txt || echo "")|base64`"

      
      # Create Notebook on SageMaker     
      NOTE_ID="aws-neptune-nb-${NEP_CLUS}"
      echo "Now creating Notebook for Neptune : $NB_RES"
      # ARNは現状、既存のものを使う
      read -p "Enter Your Notebook Role ARN: [aws sagemaker describe-notebook-instance --notebook-instance-name yyy]" NOTE_ARN
      aws sagemaker create-notebook-instance --notebook-instance-name $NOTE_ID --lifecycle-config-name $LC_NAME --subnet-id $NB_SUB --security-group-ids $NB_VPC --instance-type "ml.t3.medium" --role-arn $NOTE_ARN --root-access Disabled --tags Key="aws-neptune-cluster-id",Value="$NEP_CLUS" Key="aws-neptune-resource-id",Value="$NB_RES"
      # aws sagemaker create-notebook-instance --notebook-instance-name $NOTE_ID --subnet-id $NB_SUB --security-group-ids $NB_VPC --default-code-repository "https://github.com/aws/graph-notebook/tree/main/src/graph_notebook/notebooks" --instance-type "ml.t3.medium" --role-arn $NOTE_ARN --root-access Disabled --tags Key="aws-neptune-cluster-id",Value="$NEP_CLUS" Key="aws-neptune-resource-id",Value="$NB_RES"
      
      # Wait for the end of creation
      sleep 120; echo "waiting for the end of creation of the notebook..."
      aws sagemaker wait notebook-instance-in-service --notebook-instance-name $NOTE_ID
      aws sagemaker create-presigned-notebook-instance-url --notebook-instance-name $NOTE_ID
    command: |
      pip install -t read_slack_data_to_put_S3_via_lambda slack_sdk --no-user
      echo -n "Will you create AWS policy and role for lambda？ [Y/n]: "
      read ANS
      case $ANS in
        "" | [Yy]* )
          sh configure_iam/example_lambda_role_with_S3Put.sh
          ;;
        * )
          echo "No"
          ;;
      esac
      echo -n "Will you create lambda function？ [Y/n]: "
      read ANS2
      case $ANS2 in
        "" | [Yy]* )
          sh read_slack_data_to_put_S3_via_lambda/test.sh
          ;;
        * )
          echo "No"
          ;;
      esac
    openMode: split-right

# List the ports to expose. Learn more https://www.gitpod.io/docs/config-ports/
# ports:
#   - port: 3000
#     onOpen: open-preview
